apiVersion: v1
data:
  custom-entrypoint.sh: |
    #!/bin/bash
    set -e


    # Start the PostgreSQL server
    docker-entrypoint.sh postgres &

    # Wait for the server to start
    until pg_isready -h localhost -p 5432; do
      echo "Waiting for PostgreSQL to start..."
      sleep 2
    done

    if [ "$(psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'todos'")" == "" ]; then
      psql -U postgres -f /docker-entrypoint-initdb.d/init.sql
    else
      echo "Database already initialized. Skipping initialization script."
    fi

    # Wait for the PostgreSQL process to end
    wait
  init.sql: |
    CREATE DATABASE todos;
    CREATE TABLE todos(
      id INT,
      text VARCHAR(255),
      completed BOOLEAN
    );
kind: ConfigMap
metadata:
  name: prod-postgres-init-config
  namespace: production
---
apiVersion: v1
data:
  web.properties: |
    window.API_URL = "__API_URL__";
kind: ConfigMap
metadata:
  name: prod-web-config
  namespace: production
---
apiVersion: v1
kind: Service
metadata:
  name: prod-broadcaster-svc
  namespace: production
spec:
  ports:
  - port: 2345
    protocol: TCP
    targetPort: 8500
  selector:
    app: broadcaster
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: prod-postgres-svc
  namespace: production
spec:
  clusterIP: None
  ports:
  - name: web
    port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: prod-todo-go-backend-svc
  namespace: production
spec:
  ports:
  - port: 2345
    protocol: TCP
    targetPort: 8000
  selector:
    app: todo-go-backend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: prod-todo-go-frontend-svc
  namespace: production
spec:
  ports:
  - port: 2345
    protocol: TCP
    targetPort: 8080
  selector:
    app: todo-go-frontend
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prod-example-pv
spec:
  accessModes:
  - ReadWriteOncePod
  capacity:
    storage: 1Gi
  local:
    path: /tmp/kube
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k3d-k3s-default-agent-0
  storageClassName: my-example-pv
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prod-image-claim
  namespace: production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: my-example-pv
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-broadcaster
  namespace: production
spec:
  replicas: 6
  selector:
    matchLabels:
      app: broadcaster
  template:
    metadata:
      labels:
        app: broadcaster
    spec:
      containers:
      - env:
        - name: ENVIRONMENT
          value: production
        - name: NATS_URL
          value: my-nats.development.svc.cluster.local:4222
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              key: WEBHOOK_URL
              name: webhook-url
        image: djblackett/broadcaster:v0.03
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8500
          initialDelaySeconds: 20
          periodSeconds: 5
        name: broadcaster
        ports:
        - containerPort: 8500
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8500
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 50m
            memory: 50Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prod-postgres-ss
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - command:
        - /bin/bash
        - /docker-entrypoint-initdb.d/custom-entrypoint.sh
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PASSWORD
              name: postgres-password
        - name: POSTGRES_USER
          value: postgres
        image: postgres:13.0
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
          subPath: postgres
        - mountPath: /docker-entrypoint-initdb.d
          name: init-script
      volumes:
      - configMap:
          name: prod-postgres-init-config
        name: init-script
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: prod-backup
  namespace: production
spec:
  jobTemplate:
    metadata:
      labels:
        job-name: backup
    spec:
      template:
        spec:
          containers:
          - env:
            - name: PORT
              value: :8000
            - name: HOST
              value: postgres-svc
            - name: USER
              value: postgres
            - name: DB_NAME
              value: todos
            - name: POSTGRES_PORT
              value: "5432"
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  key: PASSWORD
                  name: postgres-password
            image: backup
            name: backup
          nodeSelector:
            iam.gke.io/gke-metadata-server-enabled: "true"
          restartPolicy: OnFailure
          serviceAccountName: my-k8s-sa
  schedule: 0 0 * * *
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: prod-reminder
  namespace: production
spec:
  jobTemplate:
    metadata:
      labels:
        job-name: reminder
    spec:
      template:
        spec:
          containers:
          - env:
            - name: API_URL
              value: http://todo-go-backend-svc:2345/todos
            image: djblackett/add-reminder:v0.4
            name: reminder
          restartPolicy: OnFailure
  schedule: 38 * * * *
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: prod-cpu-usage
  namespace: production
spec:
  metrics:
  - initialDelay: 15m
    name: cpu-usage
    provider:
      prometheus:
        address: http://kube-prometheus-stack-1720-prometheus.prometheus.svc.cluster.local:9090
        query: |
          scalar(sum(rate(container_cpu_usage_seconds_total{container!="", namespace="development"}[10m])))
    successCondition: result < 0.80
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: prod-todo-go-backend
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-go-backend
  strategy:
    canary:
      steps:
      - setWeight: 100
  template:
    metadata:
      labels:
        app: todo-go-backend
    spec:
      containers:
      - image: djblackett/backend:v4.0.10
        name: todo-go-backend
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: prod-todo-go-frontend
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-go-frontend
  strategy:
    canary:
      steps:
      - setWeight: 100
  template:
    metadata:
      labels:
        app: todo-go-frontend
    spec:
      containers:
      - image: djblackett/frontend:v4.02.8
        name: todo-go-frontend
      volumes:
      - configMap:
          items:
          - key: web.properties
            path: config.js
          name: web-config
        name: config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-todo-go-ingress
  namespace: production
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - backend:
          service:
            name: prod-todo-go-frontend-svc
            port:
              number: 2345
        path: /
        pathType: Prefix
      - backend:
          service:
            name: prod-todo-go-backend-svc
            port:
              number: 2345
        path: /todos
        pathType: Prefix
